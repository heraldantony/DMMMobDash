import React, { Component } from "react";
import PropTypes from 'prop-types';

import {
  Platform,
  StyleSheet,
  Text,
  TextInput,
  ScrollView,
  Image,
  View,
  Button,
  TouchableHighlight,
  TouchableOpacity,
  TouchableNativeFeedback,
  TouchableWithoutFeedback,
  Alert
} from "react-native";

import { AreaChart, Grid } from "../../charts";
import * as shape from "d3-shape";
import SocketService from "../../utils/socket.api";
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as dashboardActions from '../../actions/dcmobdash.actions';

class AccelerationChart extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentWillMount() {
    SocketService.init();
    SocketService.addListener("acceleration-response", this.accelerationResponseCB.bind(this));
  }
  componentWillUnmount() {
    SocketService.removeListener("acceleration-response");
  }
  accelerationResponseCB(data) {
    console.log(data);
    this.props.actions.getAccelerationDataSuccess({data: data})
    //   this.props.dispatch({})
   // this.setState({data: data})
  }
  render() {
   /* const data = [
      50,
      10,
      40,
      95,
      -4,
      -24,
      85,
      91,
      35,
      53,
      -53,
      24,
      50,
      -20,
      -80
    ];
    */
    const {data} = this.props;
    return (
      <View>
        <AreaChart
          style={{ height: 200 }}
          data={data}
          contentInset={{ top: 30, bottom: 30 }}
          curve={shape.curveNatural}
          svg={{ fill: "rgba(134, 65, 244, 0.8)" }}
        >
          <Grid />
        </AreaChart>
        <Button
          onPress={() => {
            // Alert.alert("You tapped the button!");
            Alert.alert("Length of prev data ="+data.length)
            SocketService.emitEvent("acceleration-request", { durationInSeconds: 5, rateInHz: 25 });
          }}
          title="Press Me"
        />
      </View>
    );
  }
}

AccelerationChart.propTypes = {
	actions: PropTypes.object.isRequired,
	data: PropTypes.array.isRequired
};

function mapStateToProps(state, ownProps) {
	return {
		data: (state.acceleration) || []
	};
}

function mapDispatchToProps(dispatch) {
	return {
		actions: bindActionCreators(dashboardActions, dispatch)
	};
}

export default connect(mapStateToProps, mapDispatchToProps)(AccelerationChart);

